#pragma once

#include "raylib.h"

struct PieceDefinition {
	Color color;
	int width[4];
	int height[4];
	int layout[4][16];
};

static constexpr PieceDefinition s_pieces[] = {
	// I Piece
	{
		.color = Color(0, 240, 240, 255),
		.width = { 1, 4, 1, 4 },
		.height = { 4, 1, 4, 1 },
		.layout = {
			{
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
			},
			{
				1, 1, 1, 1,
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
			},
			{
				1, 1, 1, 1,
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			}
		},
	},

	// L Piece
	{
		.color = Color(0, 0, 240, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				1, 0, 0, 0,
				1, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 1, 0,
				0, 0, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 0, 0,
				0, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
			}
		},
	},

	// Reverse L Piece
	{
		.color = Color(240, 160, 0, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				0, 0, 1, 0,
				1, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				0, 1, 0, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 1, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
			}
		},
	},

	// Square Piece
	{
		.color = Color(240, 240, 0, 255),
		.width = { 2, 2, 2, 2 },
		.height = { 2, 2, 2, 2 },
		.layout = {
			{
				1, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			}
		},
	},

	// S Piece
	{
		.color = Color(0, 240, 0, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				0, 1, 1, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 1, 0, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 1, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 1, 0, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
			},
		}
	},

	// T Piece
	{
		.color = Color(160, 0, 240, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				0, 1, 0, 0,
				1, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 1, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 1, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 0, 0,
				1, 1, 0, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
			},
		}
	},

	// Z Piece
	{
		.color = Color(240, 0, 0, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				1, 1, 0, 0,
				0, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 0, 0,
				1, 1, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				0, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 0, 0,
				1, 1, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
		}
	},


	/////////////////////////////////////////
	// EXTEDNED PIECES
	/////////////////////////////////////////

	// 3 block I piece
	{
		.color = Color(0, 240, 240, 255),
		.width = { 1, 3, 1, 3 },
		.height = { 3, 1, 3, 1 },
		.layout = {
			{
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 0, 0, 0,
				1, 0, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 1, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			}
		},
	},

	// 3 block L Piece
	{
		.color = Color(0, 0, 240, 255),
		.width = { 3, 2, 3, 2 },
		.height = { 2, 3, 2, 3 },
		.layout = {
			{
				1, 0, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				1, 0, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				1, 1, 0, 0,
				0, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			},
			{
				0, 1, 0, 0,
				1, 1, 0, 0,
				0, 0, 0, 0,
				0, 0, 0, 0,
			}
		},
	},
};